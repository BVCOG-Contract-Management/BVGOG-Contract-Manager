require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# BVCOG Config
# Create the directories if they don't exist
Dir.mkdir(Rails.root.join('public/contracts')) unless Dir.exist?(Rails.root.join('public/contracts'))
Dir.mkdir(Rails.root.join('public/reports')) unless Dir.exist?(Rails.root.join('public/reports'))

unless BvcogConfig.exists?(id: 1)
  BvcogConfig.create(
    id: 1,
    contracts_path: Rails.root.join('public/contracts'),
    reports_path: Rails.root.join('public/reports')
  )
end

RSpec.describe '/reports', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Report. As you add validations to Report, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Report.create! valid_attributes
      get reports_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      report = Report.create! valid_attributes
      get report_url(report)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_report_url + '?type=contracts'
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      report = Report.create! valid_attributes
      get edit_report_url(report)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Report' do
        expect do
          post reports_url, params: { report: valid_attributes }
        end.to change(Report, :count).by(1)
      end

      it 'redirects to the created report' do
        post reports_url, params: { report: valid_attributes }
        expect(response).to redirect_to(report_url(Report.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Report' do
        expect do
          post reports_url, params: { report: invalid_attributes }
        end.to change(Report, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post reports_url, params: { report: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested report' do
        report = Report.create! valid_attributes
        patch report_url(report), params: { report: new_attributes }
        report.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the report' do
        report = Report.create! valid_attributes
        patch report_url(report), params: { report: new_attributes }
        report.reload
        expect(response).to redirect_to(report_url(report))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        report = Report.create! valid_attributes
        patch report_url(report), params: { report: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end

RSpec.describe ReportsController, type: :controller do
  describe 'GET #index' do
    it 'redirects to new_report_path with type contracts' do
      get :index
      expect(response).to redirect_to(new_report_path(type: ReportType::CONTRACTS))
    end
  end

  describe 'GET #show' do
    let(:report) do
      FactoryBot.create(:report, title: 'test',
                                 file_name: 'abc',
                                 full_path: 'abc',
                                 report_type: ReportType::CONTRACTS,
                                 user_id: 1)
    end

    it 'renders the show template' do
      get :show, params: { id: report.id }
      expect(response).to render_template(:show)
    end
  end

  describe 'GET #new' do
    context 'when type is contract' do
      it 'assigns a new report as @report' do
        get :new, params: { type: ReportType::CONTRACTS }
        expect(assigns(:report)).to be_a_new(Report).with(report_type: ReportType::CONTRACTS)
      end
    end

    context 'when type is user' do
      it 'assigns a new report as @report' do
        get :new, params: { type: ReportType::USERS }
        expect(assigns(:report)).to be_a_new(Report).with(report_type: ReportType::USERS)
      end
    end

    context 'when type is invalid' do
      it 'redirects to new_report_path with type contracts' do
        get :new, params: { type: 'invalid' }
        expect(response).to redirect_to(new_report_path(type: ReportType::CONTRACTS))
      end
    end
  end

  describe 'POST #create' do
    unless User.exists?(email: 'admin@example.com')
      user = FactoryBot.create(
        :user,
        email: 'admin@example.com',
        password: 'password',
        first_name: 'Admin',
        last_name: 'User',
        program: Program.all.sample,
        entities: Entity.all.sample(rand(0..Entity.count)),
        level: UserLevel::ONE
      )
    end

    context 'with valid parameters' do
      it 'creates a new report' do
        sign_in User.find_by(email: 'admin@example.com')
        expect do
          post :create, params: { report: { title: 'Test Report', report_type: ReportType::CONTRACTS } }
        end.to change(Report, :count).by(1)
      end

      it 'redirects to the created report' do
        sign_in User.find_by(email: 'admin@example.com')
        post :create, params: { report: { title: 'Test Report', report_type: ReportType::CONTRACTS } }
        expect(response).to redirect_to(Report.last)
      end
    end

    context 'user with valid parameters' do
      it 'creates a new report' do
        sign_in User.find_by(email: 'admin@example.com')
        expect do
          post :create, params: { report: { title: 'Test Report', report_type: ReportType::USERS } }
        end.to change(Report, :count).by(1)
      end

      it 'redirects to the created report' do
        sign_in User.find_by(email: 'admin@example.com')
        post :create, params: { report: { title: 'Test Report', report_type: ReportType::USERS } }
        expect(response).to redirect_to(Report.last)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new report' do
        sign_in User.find_by(email: 'admin@example.com')
        expect do
          post :create, params: { report: { title: nil, report_type: ReportType::CONTRACTS } }
        end.to_not change(Report, :count)
      end

      it 'renders the new template' do
        sign_in User.find_by(email: 'admin@example.com')
        sign_in User.find_by(email: 'admin@example.com')
        post :create, params: { report: { title: nil, report_type: ReportType::CONTRACTS } }
        expect(response).to render_template(:new)
      end
    end

    context 'user with invalid parameters' do
      it 'does not create a new report' do
        sign_in User.find_by(email: 'admin@example.com')
        expect do
          post :create, params: { report: { title: nil, report_type: ReportType::USERS } }
        end.to_not change(Report, :count)
      end

      it 'renders the new template' do
        sign_in User.find_by(email: 'admin@example.com')
        sign_in User.find_by(email: 'admin@example.com')
        post :create, params: { report: { title: nil, report_type: ReportType::USERS } }
        expect(response).to render_template(:new)
      end
    end
  end

  ''"describe 'GET #edit' do
    report = FactoryBot.create(:report, title: 'testReport') unless Report.exists?(title: 'testReport')

    it 'renders the edit template' do
      report = Report.find_by(title: 'test')
      get :edit, params: { id: report.id }
      expect(response).to render_template(:edit)
    end

    it 'redirects to the show page' do
      report = Report.find_by(title: 'test')
      get :edit, params: { id: report.id }
      expect(response).to redirect_to(report_path(report))
    end
  end"''
end
