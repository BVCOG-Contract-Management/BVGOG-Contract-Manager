require 'rails_helper'
require 'auth_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/contracts', type: :request do
  include Devise::Test::IntegrationHelpers
  include FactoryBot::Syntax::Methods

  before(:each) do
    login_user
  end

  # This should return the minimal set of attributes required to create a valid
  # Contract. As you add validations to Contract, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    entity = create(:entity)
    program = create(:program)
    point_of_contact = create(:user, entities: [entity], level: UserLevel::TWO)
    vendor = create(:vendor)
    return build(
      :contract,
      entity:,
      program:,
      point_of_contact:,
      vendor:
    ).attributes
  end

  let(:invalid_attributes) do
    return build(
      :contract,
      vendor_id: nil,
      entity_id: nil,
      program_id: nil,
      point_of_contact_id: nil,
      starts_at: nil,
      title: nil,
      contract_type: nil
    ).attributes
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Contract.create! valid_attributes
      get contracts_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      contract = Contract.create! valid_attributes
      get contract_url(contract)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_contract_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      contract = Contract.create! valid_attributes
      get edit_contract_url(contract)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Contract' do
        expect do
          post contracts_url, params: { contract: valid_attributes }
        end.to change(Contract, :count).by(1)
      end

      pending 'redirects to the created contract' do
        it contracts_url, params: { contract: valid_attributes }
        expect(response).to redirect_to(contract_url(Contract.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Contract' do
        expect do
          post contracts_url, params: { contract: invalid_attributes }
        end.to change(Contract, :count).by(0)
      end

      pending "renders a successful response (i.e. to display the 'new' template)" do
        post contracts_url, params: { contract: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested contract' do
        contract = Contract.create! valid_attributes
        patch contract_url(contract), params: { contract: new_attributes }
        contract.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the contract' do
        contract = Contract.create! valid_attributes
        patch contract_url(contract), params: { contract: new_attributes }
        contract.reload
        expect(response).to redirect_to(contract_url(contract))
      end
    end

    context 'with invalid parameters' do
      pending "renders a successful response (i.e. to display the 'edit' template)" do
        contract = Contract.create! valid_attributes
        patch contract_url(contract), params: { contract: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end

RSpec.describe ContractsController, type: :controller do
  let(:user) { FactoryBot.create(:user) }
  let(:contract) { FactoryBot.create(:contract) }

  describe '#expiry_reminder' do
    before { sign_in user }

    it 'sends expiry reminder and redirects to contract page' do
      allow_any_instance_of(Contract).to receive(:send_expiry_reminder).and_return(true)

      get :expiry_reminder, params: { id: contract.id }

      expect(assigns(:contract)).to eq(contract)
      expect(flash[:notice]).to eq('Expiry reminder sucessfully sent.')
      expect(response).to redirect_to(contract_url(contract))
    end
  end
end

require 'rails_helper'

RSpec.describe ContractsController, type: :controller do
  describe '#sort_contracts' do
    let(:user) { FactoryBot.create(:user) }

    before { sign_in(user) }

    it 'returns a list of contracts sorted by expiration date' do
      contract1 = FactoryBot.create(:contract, ends_at: 10.days.from_now, point_of_contact: user)
      contract2 = FactoryBot.create(:contract, ends_at: 20.days.from_now, point_of_contact: user)

      get :index, params: { sort: 'expiration_date_asc' }
      get :index, params: { sort: 'point_of_contact' }
      get :index, params: { sort: 'vendor' }
      get :index, params: { sort: 'potato' }
    end
  end
end

require 'rails_helper'

RSpec.describe ContractsController, type: :controller do
  describe '#handle_if_new_vendor' do
    context "when the contract's vendor is new" do
      let(:contract) { FactoryBot.create(:contract, vendor_id: 'new', new_vendor_name: 'vendor uno') }
    end

    context "when the contract's vendor already exists" do
      let(:existing_vendor) { FactoryBot.create(:vendor) }
      let(:user) { FactoryBot.create(:user) }
      let(:contract_attributes) { FactoryBot.attributes_for(:contract, vendor_id: existing_vendor.id) }

      before do
        sign_in user
        post :create, params: { contract: contract_attributes }
      end

      it 'does not create a new vendor' do
        expect(Vendor.count).to eq(1)
      end
    end
  end
end

require 'rails_helper'
