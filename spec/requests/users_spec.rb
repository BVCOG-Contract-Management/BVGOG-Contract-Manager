# frozen_string_literal: true

require 'rails_helper'
require 'auth_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
    include Devise::Test::IntegrationHelpers
    include FactoryBot::Syntax::Methods
    # This should return the minimal set of attributes required to create a valid
    # User. As you add validations to User, be sure to
    # adjust the attributes here as well.
    before do
        login_user
    end

    let(:valid_attributes) do
        {
            email: 'user@example.com',
            password: 'password',
            first_name: 'Example',
            last_name: 'User',
            program: create(:program),
            entities: [create(:entity)],
            invitation_accepted_at: Time.zone.now
        }
    end

    let(:invalid_attributes) do
        {
            first_name: nil,
            last_name: nil
        }
    end

    describe 'GET /index' do
        it 'renders a successful response' do
            User.create! valid_attributes
            get users_url
            expect(response).to be_successful
        end
    end

    describe 'GET /show' do
        it 'renders a successful response' do
            user = User.create! valid_attributes
            get user_url(user)
            expect(response).to be_successful
        end
    end

    describe 'GET /edit' do
        it 'renders a successful response' do
            user = User.create! valid_attributes
            get edit_user_url(user)
            expect(response).to be_successful
        end
    end

    describe 'GET #new' do
        it 'redirects to users_path with alert' do
            get new_user_url
            expect(response).to redirect_to(users_path)
            expect(flash[:alert]).to eq('You do not have permission to access this page.')
        end
    end

    describe 'PATCH /update' do
        context 'with valid parameters' do
            let(:new_attributes) do
                skip('Add a hash of attributes valid for your model')
            end

            it 'updates the requested user' do
                user = User.create! valid_attributes
                patch user_url(user), params: { user: new_attributes }
            end

            it 'redirects to the user' do
                user = User.create! valid_attributes
                patch user_url(user), params: { user: new_attributes }
            end
        end

        context 'with invalid parameters' do
            it "renders a successful response (i.e. to display the 'edit' template)" do
                user = User.create! valid_attributes
                patch user_url(user), params: { user: invalid_attributes }
                expect(response).to have_http_status(:unprocessable_entity)
                expect(response).to render_template(:edit)
                # expect(response).to be_successful
            end
        end

        context 'deactivate user' do
            let(:new_attributes) { { is_active: 'false' } }

            it "renders a successful response (i.e. to display the 'edit' template)" do
                user = User.create! valid_attributes
                patch user_url(user), params: { user: new_attributes }
                user.reload

                expect(response).to redirect_to(user_url(user))
            end
        end
    end
end
